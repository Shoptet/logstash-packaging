input {

    file {
        type => "nginx"

        path => "/var/log_cluster/cl-lbng0?/nginx/host.access.log"
        sincedb_path => "/var/tmp/logstash-nginx"

#        # Test
#        path => "/etc/logstash/sample/nginx.log"
#        start_position => "beginning"
#        sincedb_path => "/etc/logstash/sample/nginx.db"
    }

    file {
        type => "postfix"
        tags => "batch"

        path => "/var/log_cluster/cl-news/mail.log"
        sincedb_path => "/var/tmp/logstash-postfix-batch"

#        # Test
#        path => "/etc/logstash/sample/postfix.log"
#        start_position => "beginning"
#        sincedb_path => "/etc/logstash/sample/postfix.db"
    }

    file {
        type => "postfix"
        tags => "transaction"

        path => "/var/log_cluster/cl-lbng0?/mail.log"
        sincedb_path => "/var/tmp/logstash-postfix-transaction"
    }

    file {
        type => "php"
        tags => "web"

        path => "/var/log_cluster/cl-as*/php/php_events.log"
        sincedb_path => "/var/tmp/logstash-php-web"

#        # Test
#        path => "/etc/logstash/sample/php.log"
#        start_position => "beginning"
#        sincedb_path => "/etc/logstash/sample/php.db"
    }

    file {
        type => "php"
        tags => "cron"

        path => "/var/log/apache2/php/php_events.log"
        sincedb_path => "/var/tmp/logstash-php-cron"
    }
}

filter {

    if [type] == "nginx" {
        grok {
            patterns_dir => [ "/etc/logstash/grok-patterns" ]
            match => [
                "message", "%{COMBINEDAPACHELOGEXT} %{NGINXLOADBALANCER}",
                "message", "%{COMBINEDAPACHELOGEXT} %{GREEDYDATA:unknown}"
            ]
        }

        mutate {
            add_field => [ "betimeint", "%{betime}" ]
        }

        mutate {
            convert => [ "betimeint", "integer" ]
        }

        date {
            match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
    }

    if [type] == "postfix" {
        grok {
            patterns_dir => [ "/etc/logstash/grok-patterns" ]
            match => [
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPDCONNECTS}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPDACTIONS}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPDTIMEOUTS}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPDLOGIN}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPDCLIENT}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPRELAY}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPRELAYCACHE}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPCONNECT}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTP4XX}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTP5XX}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPREFUSAL}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPLOSTCONNECTION}",
                "message", "%{SYSLOGBASE} %{POSTFIXSMTPTIMEOUT}",
                "message", "%{SYSLOGBASE} %{POSTFIXBOUNCE}",
                "message", "%{SYSLOGBASE} %{POSTFIXQMGR}",
                "message", "%{SYSLOGBASE} %{POSTFIXCLEANUP}",
                "message", "%{SYSLOGBASE} %{GREEDYDATA:unknown}"
            ]
            named_captures_only => true
        }

        date {
            match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
    }

    if [type] == "php" {
        grok {
            patterns_dir => [ "/etc/logstash/grok-patterns" ]
            match => [
                "message", "%{NOTSPACE:failure_id} %{TIMESTAMP_ISO8601:timestamp} %{INT:fatal} %{NOTSPACE:error_type} %{NOTSPACE:error_name} (?:%{HOST:vhost}|-) (?:%{HTTPREQUEST:request}|-) (?:%{INT:project_id}|-) (?:%{INT:cms}|-) %{PHPPATH:src_path} %{INT:line} %{GREEDYDATA:desc}"
            ]
        }

        date {
            match => [ "timestamp", "ISO8601" ]
        }
    }
}

output {
    #stdout {
    #    codec => rubydebug
    #}
    elasticsearch_http {
       host => "cl-es1"
       index => "logstash-%{+YYYY.MM.dd}"
    }
}
